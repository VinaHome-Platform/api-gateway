/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import {
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { Observable } from 'rxjs';
import { Request } from 'express';
import { Reflector } from '@nestjs/core';

// Extend Express Request interface to include custom properties
declare module 'express-serve-static-core' {
  interface Request {
    account_id?: string;
    role?: string;
  }
}

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(
    private reflector: Reflector,
    private jwtService: JwtService,
  ) {}

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const requiredRoles = this.reflector.get<string[]>(
      'roles',
      context.getHandler(),
    );

    const request = context.switchToHttp().getRequest<Request>();
    const token = this.extractTokenFromHeader(request);

    if (!token) {
      console.warn('Kh√¥ng t√¨m th·∫•y token trong header');
      throw new UnauthorizedException('Kh√¥ng t√¨m th·∫•y token trong header');
    }

    try {
      const payload = this.jwtService.verify(token, {
        clockTolerance: 5, // cho ph√©p l·ªách th·ªùi gian 5s
      });

      console.log('‚úÖ Token payload:', payload);
      console.log('üïí Server time (epoch):', Math.floor(Date.now() / 1000));
      console.log('üïí Token iat:', payload.iat);
      console.log('üïí Token exp:', payload.exp);
      console.log('‚è± Token th·ªùi h·∫°n (gi√¢y):', payload.exp - payload.iat);

      request.account_id = payload.account_id;
      request.role = payload.role;

      if (requiredRoles && !requiredRoles.includes(payload.role as string)) {
        console.warn('‚ùå Vai tr√≤ kh√¥ng ƒë·ªß quy·ªÅn:', payload.role);
        throw new ForbiddenException('Kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p API');
      }
    } catch (error) {
      console.error('‚ùå Token verify error:', error.name, error.message);

      if (error.name === 'TokenExpiredError') {
        throw new UnauthorizedException('Token ƒë√£ h·∫øt h·∫°n');
      }

      if (error.name === 'JsonWebTokenError') {
        throw new UnauthorizedException('Token kh√¥ng h·ª£p l·ªá');
      }

      throw error;
    }

    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const authHeader = request.headers?.authorization;
    if (typeof authHeader === 'string' && authHeader.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      console.log('üîê Token l·∫•y t·ª´ header:', token);
      return token;
    }
    return undefined;
  }
}
